<?php

namespace pgn;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-18 at 23:06:49.
 */
class PGNTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var PGN
     */
    protected $object;

    /**
     *
     * @var string 
     */
    protected $resourcePath;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new PGN;
        echo __CLASS__ . '::' . $this->getName() . "\n";
//        $this->resourcePath = dirname(__FILE__) . DIRECTORY_SEPARATOR . ".." 
//                . DIRECTORY_SEPARATOR . ".." . DIRECTORY_SEPARATOR . "resources"
//                . DIRECTORY_SEPARATOR;
        $this->resourcePath = dirname(__FILE__) . DIRECTORY_SEPARATOR
                . "resources" . DIRECTORY_SEPARATOR;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * 
     * @covers pgn\PGN::load
     */
    public function testLoad() {
        $fileName = '1-games-sample.pgn';
        $this->assertTrue(file_exists($this->resourcePath . $fileName));

        $contents = file_get_contents($this->resourcePath . $fileName);
        $this->object->load($contents);
        $this->assertSame(
                1, $this->object->countGames()
        );
    }

    /**
     * @expectedException \pgn\exceptions\InvalidGameFormatException
     * @covers pgn\PGN::load
     */
    public function testLoadException() {
        $this->object->load('asdf');
    }

    /**
     * 
     */
    public function testRegex() {
        $fileName = '1-games-sample.pgn';
        $this->assertTrue(file_exists($this->resourcePath . $fileName));
        $contents = file_get_contents($this->resourcePath . $fileName);

        $pattern = "[\s+" . tags\Result::validPattern() . "]";
        $arr = preg_split($pattern, $contents);
        $games = array();
        foreach ($arr as $key => $value) {
            $game = trim($value);
            if (!empty($game)) {
                $games[] = trim($value);
            }
        }

        echo "Games: ";
        var_dump($games);
//        echo "MoveText: ";
//        var_dump($movetext);
    }

    /**
     * 
     * @covers pgn\PGN::loadFromFile
     */
    public function testLoadFromFile() {
        $fileName = '1-games-sample.pgn';
        $this->assertTrue(file_exists($this->resourcePath . $fileName));
        $this->object->loadFromFile($this->resourcePath . $fileName);
        $this->assertSame(
                1, $this->object->countGames()
        );
    }

    /**
     * 
     * @covers pgn\PGN::loadFromFile
     */
    public function testLoadFromFile2() {
        $fileName = '2-games-sample.pgn';
        $this->assertTrue(file_exists($this->resourcePath . $fileName));
        $this->object->loadFromFile($this->resourcePath . $fileName);
        $this->assertSame(
                2, $this->object->countGames()
        );
    }

    /**
     * 
     * @covers pgn\PGN::loadFromFile
     */
    public function testLoadFromFile2FEN() {
        $fileName = 'FEN.pgn';
        $this->assertTrue(file_exists($this->resourcePath . $fileName));
        $this->object->loadFromFile($this->resourcePath . $fileName);
        $this->assertSame(
                2, $this->object->countGames()
        );
    }

    /**
     * 
     * @covers pgn\PGN::loadFromFile
     */
    public function testLoadFromFileFEN1() {
        $fileName = 'FEN1.pgn';
        $this->assertTrue(file_exists($this->resourcePath . $fileName));
        $this->object->loadFromFile($this->resourcePath . $fileName);
        $this->assertSame(
                1, $this->object->countGames()
        );
    }

    /**
     * 
     * @covers pgn\PGN::loadFromFile
     */
    public function testLoadFromFile3() {
        $fileName = '3-games-sample.pgn';
        $this->assertTrue(file_exists($this->resourcePath . $fileName));
        $this->object->loadFromFile($this->resourcePath . $fileName);
        $this->assertSame(
                3, $this->object->countGames()
        );
    }

    /**
     * 
     * @covers pgn\PGN::loadFromFile
     */
    public function testLoadFromFile20() {
        $fileName = '20-games-sample.pgn';
        $this->assertTrue(file_exists($this->resourcePath . $fileName));
        $this->object->loadFromFile($this->resourcePath . $fileName);
        $this->assertSame(
                20, $this->object->countGames()
        );
    }

    /**
     * 
     * @covers pgn\PGN::countGames()
     */
    public function testCountGames() {
        $this->assertSame(0, $this->object->countGames());
    }

}
